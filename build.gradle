plugins {
    id 'org.springframework.boot' version '2.6.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'maven-publish'
}

group = 'com.hector'
version = '0.0.1'
sourceCompatibility = project.'java.version'
targetCompatibility = project.'java.version'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

publishing {
    repositories {
        maven {
            name = 'nexusRepository'
            url project.nexusRepositoryReleases
            credentials(PasswordCredentials)
            allowInsecureProtocol = true
        }
    }
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.apache.commons:commons-lang3'
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.6'
    implementation 'org.modelmapper:modelmapper:3.0.0'

    implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.4'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    runtimeOnly 'com.h2database:h2'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'com.querydsl:querydsl-jpa'
    implementation 'javax.persistence:javax.persistence-api'

    annotationProcessor(
            "javax.persistence:javax.persistence-api",
            "javax.annotation:javax.annotation-api",
            "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa")

    compileOnly 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

def generated='src/main/generated'
sourceSets {
    main.java.srcDirs += [ generated ]
}

tasks.withType(JavaCompile) {
    options.generatedSourceOutputDirectory = file(generated)
}

clean {
    delete file(generated)
}

task cleanGeneatedDir(type: Delete) {
    delete file(generated)
}

test {
    useJUnitPlatform()
}
